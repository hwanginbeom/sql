-- 5.join.sql

/*
1. 조인이란?
	다수의 table간에  공통된 데이터를 기준으로 검색하는 명령어
	(물리적으로 구분된 다른 테이블 및 동일한 테이블에서 논리적으로
	다른 테이블 인 듯한 구조로 검색)
	- 사원의 상사 이름 검색
	emp table (empno, ename ,hiredate, sal , deptno , job, mgr..)


2. 사용 table
	1. emp & dept
	  : deptno 컬럼을 기준으로 연관되어 있음

	 2. emp & salgrade(급여등급)
	  : sal 컬럼을 기준으로 연관되어 있음


3. table에 별칭 사용


4. 조인 종류
	1. 동등 조인(equi)
		 = 동등비교 연산자 사용
		 : 사용 빈도 가장 높음
		 : 테이블에서 같은 조건이 존재할 경우의 값 검색

	2. not-equi 조인
		: 100% 일치하지 않고 특정 범위내의 데이터 조인시에 사용
		: between ~ and(비교 연산자)

	3. self 조인
		: 동일 테이블 내에서 진행되는 조인
		: 동일 테이블 내에서 상이한 칼럼 참조
			emp의 empno[사번]과 mgr[사번] 관계

	4. outer 조인
		: 검색되지 않는 문제를 해결하기 위해 사용되는 조인
		  null 값이기 때문에 배제된 행을 결과에 함께 검색하기 위한 조인

		: oracle DB의 sql인 경우 데이터가 null 쪽 table 에 + 기호 표기 */

-- 1. dept table의 구조 검색
desc dept;
-- dept table의 모든 데이터 검색
select * from dept;



--*** 1. 동등 조인 ***

-- 2. SMITH 의 이름(ename), 사번(empno), 근무지역(부서위치 dept의 loc) 정보를 검색

select ename , empno , loc
from emp, dept
where ename ='SMITH' and emp.deptno = dept.deptno;

-- table 별칭 부여하기
select ename , empno , loc
from emp e, dept d
where ename ='SMITH' and e.deptno = d.deptno;


-- 3. deptno가 동일한 모든 데이터 검색
--emp,dept
--단점: deptno 값이 두번 검색
-- 해결책 : * 표기가 아닌 enam, ...,emp.deptno (하나씩 명시)
-- 즉 deptno는 하나의 table 명.deptno 로 검색
select *
from emp e , dept d
where e.deptno=d.deptno;


GR HIREDATE        SAL       COMM     DEPTNO     DEPTNO DNAME                        LOC
---------- -------------------- ------------------ ---------- -------- ---------- ---------- ---------- ---------- ---------------------------- --------------------------
      7839 KING                 PRESIDENT                     81/11/17       5000                    10         10 ACCOUNTING                   NEW YORK
      7782 CLARK                MANAGER                  7839 81/06/09       2450                    10         10 ACCOUNTING                   NEW YORK
      7934 MILLER               CLERK                    7782 82/01/23       1300                    10         10 ACCOUNTING                   NEW YORK
      7902 FORD                 ANALYST                  7566 81/12/03       3000                    20         20 RESEARCH                     DALLAS
      7369 SMITH                CLERK                    7902 80/12/17        800                    20         20 RESEARCH                     DALLAS
      7566 JONES                MANAGER                  7839 81/04/02       2975                    20         20 RESEARCH                     DALLAS
      7900 JAMES                CLERK                    7698 81/12/03        950                    30         30 SALES                        CHICAGO
      7844 TURNER               SALESMAN                 7698 81/09/08       1500          0         30         30 SALES                        CHICAGO
      7654 MARTIN               SALESMAN                 7698 81/09/28       1250       1400         30         30 SALES                        CHICAGO
      7521 WARD                 SALESMAN                 7698 81/02/22       1250        500         30         30 SALES                        CHICAGO
      7499 ALLEN                SALESMAN                 7698 81/02/20       1600        300         30         30 SALES                        CHICAGO
      7698 BLAKE                MANAGER                  7839 81/05/01       2850                    30         30 SALES                        CHICAGO


-- 4. 2+3 번 항목 결합해서 SMITH에 대한 모든 정보 검색하기

생략
-- 5.  SMITH에 대한 이름(ename)과 부서번호(deptno), 부서명(dept의 dname) 검색하기

--중복되는건 이게 어디에 속한 건지 말해줘야한다.

select ename , e.deptno, dname
from emp e , dept d
where ename = 'SMITH' and e.deptno = d.deptno;


select ename , e.deptno, dname
from emp e , dept d
where ename = 'SMITH'

두개가 다르다. 위에 e.deptno는 smith 에서 돌아가는거고

select ename , d.deptno, dname
from emp e , dept d
where ename = 'SMITH'

밑에있는 d.deptno 는 d의 조건에서만 돌아가는 거기 때문에 e의 조건인
ename의 조건이 들어가지 않기 때문에 이런식으로 나온다.



-- 6. 조인을 사용해서 뉴욕에 근무하는 사원의 이름과 급여를 검색
-- loc='NEW YORK', ename, sal

select ename sal
from emp e , dept d
where d.loc = 'NEW YORK' and e.deptno = d.deptno;

select ename sal
from emp e , dept d
where d.loc = 'NEW YORK' ;
이건 오류


-- 7. 조인 사용해서 ACCOUNTING 부서(dname)에 소속된 사원의 이름과 입사일 검색
첫번째 권장
select ename, hiredate
from emp , dept
where dname = 'ACCOUNTING' and dept.deptno = emp.deptno;

select ename, hiredate
from emp , dept
where  dept.deptno = emp.deptno and dname = 'ACCOUNTING';


-- 8. 직급이 MANAGER인 사원의 이름, 부서명 검색
select ename , dname
from emp e, dept d
where job ='MANAGER' and e.deptno=d.deptno;


-- *** 2. not-equi 조인 ***


-- salgrade table(급여 등급 관련 table)
-- 9. 사원의 급여가 몇 등급인지 검색
-- between ~ and
select sal ,grade
from emp , salgrade
where sal between losal and hisal;


--? 등급이 3등급인 사원들의 이름과 급여 검색
select ename , sal , grade
from emp , salgrade
where grade = 3 and sal between losal and hisal;
--급여가 3이고 이 사이에 있는 애들을 뽑는다.


--not-equi 학습 후 문제를 보고 동등조인 ? not-equi 조인 구분 가능여부 자가진단용
-- 10. 사원(emp) 테이블의 부서 번호(deptno)로 부서 테이블을 참조하여 사원명, 부서번호, 부서의 이름(dname) 검색
select ename ,e.deptno , dname
from emp e , dept d
where e.deptno = d.deptno;
--이부분은 not-equi 들어갈 부분이 없다 훼이꾸



-- *** 3. self 조인 ***

-- 11. SMITH 직원의 메니저 이름 검색
/* smith 의 상사 이름을 알기 위한 hint는 emp table의 mgr
mgr은 사번  사번으로 검색해서 ename
결론 : table 은 하나 단 논리적으로 두개의 table 로 구분해서
작업권장
*/
-- 직원 table : emp e[ename, empno, mgr]
-- 메니저 table : emp m[empno, ename]

select m.ename
from emp e , emp m
where e.ename='SMITH' and e.mgr = m.empno;

--12. 메니저가 KING인 사원들의 이름과 직급 검색
-- m : ename = 'KING'
-- e : ename, job
/*1. 사원 table 명 = e
  2. 상사 table 명 = m
  3. 매니저가 king : 매니저 이름이 KING
        m.ename 의 결과 값이 KING
  4. 사원들의 이름 과 직급
      e table 의 ename , job
  5. m.empno = e.mgr
*/
select e.ename ,e.job
from emp e, emp m
where m.ename='KING' and m.empno = e.mgr;


--13. SMITH와 동일한 근무지에서 근무하는 사원의 이름 검색
--SMITH 데이터 절대 검색 불가
-- SMITH동일 근무지 - deptno로 검색
-- deptno가 일치되는 사원의 이름 -  ename
select e1.ename
from emp e , emp e1
where e.ename ='SMITH' and e.deptno =e1.deptno and e1.ename!='SMITH';



--*** 4. outer join ***
  :null 값이 검색 되지 않는 문제를 해결하기 위해 사용되는 조인

-- 14. 모든 사원명, 메니저 명 검색, 단 메니저가 없는 사원도 검색되어야 함
-- null값을 포함한 검색도 반드시 필수
select e.ename , m.ename
from emp e, emp m
where  e.mgr = m.empno(+);

빈곳이 m 쪽에 없다 e 쪽에는  널값이 있지만 m쪽에는 없기 때문에 m에 넣어준다.

-- 15. 모든 직원명, 부서번호, 부서명 검색
-- 부서 테이블의 40번 부서와 조인할 사원 테이블의 분서 번호가 없지만,
-- outer join이용해서 40번 부서의 부서 이름도 검색하기

-- +를 없는 쪽에다가 붙이면 된다. 여기서는 e에는 40 이없는데 그래서 여기다가 붙인다 !
select ename , e.deptno , dname
from emp e, dept d
where e.deptno(+)= d.deptno;

select ename , d.deptno , dname
from emp e, dept d
where e.deptno(+)= d.deptno;
