--9.integrity.sql
/* 학습내용
*** 하나의 db 시스템에서 모든 제약조건은 관리자들이 쉽게 확인 가능하게 설계
		- 제약조건은 사용자 정의명으로 지정하는게 더 효과적
		-
1. table 생성시 제약조건을 설정하는 기법

2. 제약 조건 종류
	2-1. PK[primary key]
		- 기본키,
		-중복불가,
		-null불가,
		-데이터들 구분을 위한 핵심 데이터
			: not null + unique

	2-2. not null - 반드시 데이터 존재 ,중복 허용

	2-3. unique - 중복 불가, null은 허용

	2-4. check - table 생성시 규정한 범위의 데이터만 저장 가능

	2-5. default - insert시에 특별한 데이터 미저장시에도 자동 저장되는 기본 값
					- 자바 관점에는 멤버 변수 선언 후 객체 생성 직후 멤버 변수 기본값으로 초기화

	2-6. FK[foreign key]
		- 외래키[참조키], 다른 table의 pk를 참조하는 데이터
		- table간의 주종 관계가 형성
		- pk 보유 table이 부모, 참조하는 table이 자식
		- 부모의 미 존재하는 데이터를 자식에서 새로 생성가능? 불가
		- 자식 table들이 존재할 경우 부모table만 삭제 가능? 불가
			- 해결책 : 관계를 해제도 가능하나 가급적 분석설계시 완벽하리만큼 고민후 설계


3. 제약 조건명 명시하는 방법
	3-1. oracle engine이 기본적으로 설정
		- SYS_Xxxx
	3-2. sql개발자가 직접 설정
		- table명_컬럼명_제약조건명등 기술..단 순서는 임의 변경 가능
		- 약어 사용도 가능[분석, 설계시 용어사전 제시후 작성 권장]

4. 제약 조건 선언 위치
	4-1. 컬럼 레벨 단위
		- 컬럼선언 라인에 제약조건 설정

	4-2. 테이블 레벨 단위
		- 모든 컬럼 선언 직후 별도로 제약조건 설정


5. 오라클 자체 특별한 table
	5-1. user_constraints
		- 제약조건 정보 보유 table
		- 개발자가 table의 데이터값 직접 수정 불가
		- select constraint_name, constraint_type, table_name
			from user_constraints;
딕셔너리 관련 테이블 / user_constraints / primary  / reference


6. 이미 존재하는 table의 제약조건 수정(추가, 삭제)명령어
	6-1. 제약조건 추가
		alter table 테이블명 add constraint 제약조건명 제약조건(컬럼명);
		alter table dept01 add constraint dept01_deptno_pk primary key(deptno);

	6-2. 제약조건 삭제(drop)
		- table삭제
		alter table 테이블명 cascade constraint;

		alter table 테이블명 drop 제약조건명;
		alter table dept01 drop primary key;
*/
/*
7. 사용자 정의제약 조건 부여하는
	1. not null에 이름은 잘 부여하지 않음
		-db가 not null의 제약 조건 이름은 잘 사용하지 않음
	2. not null이 아닌 이름들은 오류 발생시 확인가능
		-관리 측면에서도 이름 부여 권장
		-예시> table명_제약조건명_컬럼명
*/

--1. 오라클 db에 설정한 table의 제약조건 정보를 보유하고 있는 table 검색하기
-- 딕셔너리 table 이라고 칭함
-- 오라클 자체 table 검색하기 :  user_constraints
-- 이 table에는 제약 조건이 있는 table명이 대문자명으로 변환해서 저장
select * from user_constraints;
desc user_constraints;
select  CONSTRAINT_TYPE, table_name from user_constraints;


select constraint_name, constraint_type, table_name
from user_constraints where table_name = 'EMP';

--EMP는 유효한 데이터 , emp 무효한 데이터
select constraint_name, constraint_type, table_name
from user_constraints where table_name = 'emp';


--2. 사용자 정의 제약조건명 명시하기
drop table emp02;

-- 제약조건은 복제되지 않음
create table emp02 as select * from emp;

select constraint_name, constraint_type, table_name
from user_constraints where table_name='EMP02';

-- table 생성하는 자가 제약조건 명시 + 제약 조건에 이름을 부여하는 작업
drop table emp02;
create table emp02(
	empno number(4) constraint emp02_nn_empno not null,
	ename varchar2(10)
);
select constraint_name, constraint_type, table_name
from user_constraints where table_name='EMP02';

--정상 실행
insert into emp02 values(1, 'tester');
--제약 조건에 위배 따라서 실행 오류 , 왜? empno는 not null 인데
--empno에 null 반영 시도 하는 문장
insert into emp02 (ename) values('master');


//2번에는 not null 이라 빈 값이 들어가면 안된다.
--cannot insert NULL into ("SCOTT"."EMP02"."EMPNO")



--3. 사용자 정의 제약조건명 설정 후 위배시 출력되는 메세지에 사용자정의 제약조건명
	-- 확인 가능
	-- pk =primary key / nn 은 not null
drop table emp02;

create table emp02(
	empno number(4) constraint emp02_pk_empno primary key,
	ename varchar2(10)
);
select constraint_name, constraint_type, table_name
from user_constraints where table_name='EMP02';



insert into emp02 values(1, 'tester');
insert into emp02 values(1, 'master');

//3번은 pk라 유일한 값을 가져야 한다.
unique constraint (SCOTT.EMP02_PK_EMPNO) violated


--4. 제약조건명을 오라클 엔진이 자동적으로 지정
	-- 사용자가 제약조건명 미 부여시 !
	-- 에러 발생시 SYS_xxxx로 출력됨
drop table emp02;
create table emp02(
	empno number(4)  unique,
	ename varchar2(10)
);
 ////////////constraint 를 하는 이유는 이 타입의 오류가 날 경우 이 부분이 문제라는 것을 말해주는 것이다.
select constraint_name, constraint_type, table_name
from user_constraints where table_name='EMP02';

insert into emp02 values(1, 'tester');
insert into emp02 values(1, 'master');



--5. pk설정
	-- 컬럼 레벨단위
drop table emp02;

create table emp02(
	empno number(4) constraint emp02_pk_empno primary key,
	ename varchar2(10) not null
);
insert into emp02 values(1, 'tester');
insert into emp02 values(1, 'master');


	-- table 레벨 단위
drop table emp02;

create table emp02(
	empno number(4),
	ename varchar2(10) not null ,
	constraint emp02_pk_empno primary key(empno)
);

insert into mp02 values(1, 'tester');
insert into emp02 values(1, 'master');




--6. 외래키[참조키]
-- 이미 제약조건이 설정된 dept table의 pk컬럼인 deptno값을 기준으로 emp02의
	--특정 컬럼이 참조하는 구조 개발
	-- dept에 미 존재하는 데이터 저장시도? 불가
	-- dept의 데이터를 참조하고 있는 상태에서 dept table deptno값 삭제시도?
drop table emp02;

create table emp02(
	empno number(4) primary key,
	ename varchar2(10) not null,
	deptno number(4) constraint empo2_fk_deptno references dept(deptno)
);


insert into emp02 values(1, 'tester', 10);
--insert into emp02 values(2, 'master', 50); //불가
select * from emp02;
-- drop table dept;//emp01의 컬럼에서 참조하는 데이터 존재하는한 삭제 불가


--7. 6번의 내용을 table 레벨 단위로 설정해 보기
drop table emp02;

create table emp02(
	empno number(4)
	ename varchar2(10) not null,
	deptno number(4),
	constraint empo2_fk_deptno  foreign key(deptno) references dept(deptno)
);

insert into emp02 values(1, 'tester', 10);
insert into emp02 values(2, 'master', 60);



--8.?
/* emp01과 dept01 table 생성

단, dept01은 deptno가 pk여야만 함

test 데이터 2개 정도만 저장

emp01은 dept01의 deptno를 참조

단, 제약조건명 명시, 제약조건 테이블 레벨 단위로 개발
*/


drop table dept01;
drop table emp01;


create table dept01 as select * from dept;
create table emp01 as select * from emp;


create table emp01(
	empno number(4) primary key,
	ename varchar2(10) not null,
	deptno number(4),
	constraint empo1_fk_deptno  foreign key(deptno) references dept(deptno)
);

create table dept01(
	deptno number(4),
	dname varchar2(10) not null,
	loc varchar2(10),
	constraint dept01_pk_deptno  primary key(deptno)
);

insert into emp01 values(1, 'tester', 10,dept01(1));
insert into emp01 values(2, 'master', 60, dept01(2));

insert into dept01 values(10, 'tester', 'dd');
insert into dept01 values(20, 'tesdfsdr', 'wew');
insert into dept01 values(30, 'teasdf', 'sd');



--9. 이미 존재하는 table에 제약조건 추가하는 명령어
drop table emp01;
drop table emp02;

create table dept01 as select * from dept;
create table emp01 as select * from emp;

--dept01 table에 pk 설정
alter table dept01 add constraint dept01_deptno_pk primary
key(depno)

--emp01 table에 fk 설정
alter table emp01 add constraint emp01_deptno_fk foreign
key(depno) references dept01(deptno);

select table_name, constraint_type, constraint_name
from user_constraints where table_name='EMP01';



select table_name, constraint_type, constraint_name
from user_constraints where table_name='EMP01';




--10. 참조 당하는 key의 컬럼이라 하더라도 자식 table에서 미 사용되는 데이터에 한해서는
	-- 삭제 가능
-- emp01이 이미 참조하는 데이터가 있는 dept01 table 삭제해보기
	-- 8+9의 sql문장 유지
-- drop table dept01;  //삭제 불가
-- delete from dept01 where deptno=30; //삭제 불가
	delete from dept01 where deptno=40; --삭제 ok



--11. check : if 조건식과 같이 저장직전의 데이터의 유효 유무 검증하는 제약조건
drop table emp01;

create table emp01(
	id varchar2(10) primary key,
	age number(3) constraint emp01_age_ck check(age between 1 and 100)
);


insert into emp01 values('masster', 10);
insert into emp01 values('master', 102 --오류 1부터 100까지만 유효 -- 이런식으로 예외 처리를 하자
select * from emp01;
select table_name, constraint_type, constraint_name
	from user_constraints where table_name='EMP01';



-- 12.? gender라는 컬럼에는 데이터가 M 또는 F만 저장되어야 함
drop table emp01;
create table emp01(
	id varchar2(10) primary key,
	age number(3) ,
	gender char(1) constraint emp01_gender_stop check(gender in('M','F'))
);



insert into emp01 values('maswewer', 'M');
insert into emp01 values('master', 'T'); //불가
select * from emp01;



--13. default : insert시에 데이터를 생략해도 자동으로 db에 저장되는 기본값
drop table emp01;

create table emp01(
	id varchar2(10) primary key,
	gender char(1) default 'F'
);

insert into emp01 (id) values('master');
insert into emp01 values('tester', 'M');
select * from emp01;




	
